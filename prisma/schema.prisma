generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Alunos {
  idAluno    Int                @id @default(autoincrement())
  nome       String             @db.VarChar(100)
  sobrenome  String             @db.VarChar(150)
  cpf        String             @unique(map: "cpf") @db.VarChar(14)
  rg         String             @unique(map: "rg") @db.VarChar(12)
  nomeMae    String             @db.VarChar(160)
  nomePai    String?            @db.VarChar(160)
  dataNasc   DateTime           @db.Date
  fotoPath   String?            @db.VarChar(255)
  descricao  String?            @db.Text
  created_at DateTime           @default(now()) @db.DateTime(0)
  updated_at DateTime           @default(now()) @updatedAt @db.DateTime(0)
  contato    ContatoAluno?
  endereco   Enderecos?
  historico  HistoricoEscolar[]
  presencas  Presencas[]
  turmaAluno TurmaAluno[]
  notas      Notas[]
  atestados  AtestadosMedicos[] // Nova relação
}

model Enderecos {
  idEndereco Int      @id @default(autoincrement())
  idAluno    Int      @unique(map: "uq_endereco_aluno")
  cep        String   @db.VarChar(9)
  rua        String   @db.VarChar(255)
  cidade     String   @db.VarChar(100)
  uf         String   @db.Char(2)
  numero     String   @db.VarChar(10)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(0)
  aluno      Alunos   @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade, map: "fk_enderecos_aluno")
}

model ContatoAluno {
  idContato  Int      @id @default(autoincrement())
  idAluno    Int      @unique(map: "uq_contato_aluno")
  nomeTel1   String   @db.VarChar(45)
  tel1       String   @db.VarChar(20)
  nomeTel2   String?  @db.VarChar(45)
  tel2       String?  @db.VarChar(20)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(0)
  aluno      Alunos   @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade, map: "fk_contatoaluno_aluno")
}

model Curso {
  idCurso           Int                @id @default(autoincrement())
  nomeCurso         String             @db.VarChar(255)
  cargaHorariaTotal Int
  descricao         String?            @db.Text
  docsPath          String?            @db.VarChar(255)
  created_at        DateTime           @default(now()) @db.DateTime(0)
  updated_at        DateTime           @default(now()) @updatedAt @db.DateTime(0)
  cursoMaterias     CursoMaterias[]
  historicoEscolar  HistoricoEscolar[]
  turmas            Turmas[]
  preCadastros      PreCadastro[]
}

model Materias {
  idMateria     Int                @id @default(autoincrement())
  nomeMateria   String             @db.VarChar(180)
  created_at    DateTime           @default(now()) @db.DateTime(0)
  updated_at    DateTime           @default(now()) @updatedAt @db.DateTime(0)
  aulas         Aula[]
  cursoMaterias CursoMaterias[]
  historico     HistoricoEscolar[]
  notas         Notas[]         // Nova relação reversa
}

model CursoMaterias {
  idCurso      Int
  idMateria    Int
  cargaHoraria Int
  curso        Curso    @relation(fields: [idCurso], references: [idCurso], onDelete: Cascade, map: "fk_cm_curso")
  materia      Materias @relation(fields: [idMateria], references: [idMateria], onDelete: Cascade, map: "fk_cm_materia")

  @@id([idCurso, idMateria])
  @@index([idMateria], map: "fk_cm_materia")
}

model Professores {
  idProfessor String      @id @db.VarChar(14)
  nome        String      @db.VarChar(100)
  sobrenome   String      @db.VarChar(150)
  rg          String      @unique(map: "rg") @db.VarChar(12)
  dataNasc    DateTime    @db.Date
  cargo       String      @db.VarChar(100)
  fotoPath    String?     @db.VarChar(255)
  docsPath    String?     @db.VarChar(255)
  descricao   String?     @db.Text
  tel         String?     @db.VarChar(20)
  created_at  DateTime    @default(now()) @db.DateTime(0)
  updated_at  DateTime    @default(now()) @updatedAt @db.DateTime(0)
  presencas   Presencas[]
  notas      Notas[]
  atestadosAvaliados AtestadosMedicos[] // Nova relação
  preCadastrosAvaliados PreCadastro[]
}

model Turmas {
  idTurma    Int          @id @default(autoincrement())
  idCurso    Int
  nomeTurma  String       @db.VarChar(100)
  anoLetivo  Int          @db.Year
  created_at DateTime     @default(now()) @db.DateTime(0)
  updated_at DateTime     @default(now()) @updatedAt @db.DateTime(0)
  aulas      Aula[]
  turmaAluno TurmaAluno[]
  curso      Curso        @relation(fields: [idCurso], references: [idCurso], onDelete: Cascade, map: "fk_turmas_curso")
  notas      Notas[]          // Nova relação reversa

  @@index([idCurso], map: "fk_turmas_curso")
}

model TurmaAluno {
  idTurma         Int
  idAluno         Int
  statusMatricula StatusMatricula @default(Ativa)
  created_at      DateTime        @default(now()) @db.DateTime(0)
  aluno           Alunos          @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade, map: "fk_turmaaluno_aluno")
  turma           Turmas          @relation(fields: [idTurma], references: [idTurma], onDelete: Cascade, map: "fk_turmaaluno_turma")

  @@id([idTurma, idAluno])
  @@index([idAluno], map: "fk_turmaaluno_aluno")
}

model Aula {
  idAula                Int         @id @default(autoincrement())
  idTurma               Int
  idMateria             Int
  dataAula              DateTime
  horario               String?
  duracaoMinutos        Int?
  aulaConcluida         Boolean     @default(false)
  presencasAplicadas    Boolean     @default(false)
  observacoes           String?     @db.Text
  descricao             String?
  planejamento          String?     @db.Text
  metodologia           String?     @db.Text
  conteudoMinistrado    String?     @db.Text
  metodologiaAplicada   String?     @db.Text
  observacoesAula       String?     @db.Text
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt

  turma                 Turmas      @relation(fields: [idTurma], references: [idTurma], onDelete: Cascade)
  materia               Materias    @relation(fields: [idMateria], references: [idMateria], onDelete: Cascade)
  presencas             Presencas[]
  docsAula              DocsAula[]
  atestadoAulas         AtestadoAulas[] // Nova relação

  @@map("Aula")
}

model DocsAula {
  idDocAula             Int      @id @default(autoincrement())
  idAula                Int
  src                   String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  aula                  Aula     @relation(fields: [idAula], references: [idAula], onDelete: Cascade)

  @@map("DocsAulas")
}

model Presencas {
  idPresenca    Int         @id @default(autoincrement())
  idAula        Int
  idAluno       Int
  idProfessor   String      @db.VarChar(14)
  presente      Boolean
  justificativa String?     @db.Text
  dataRegistro  DateTime    @default(now()) @db.DateTime(0)
  aluno         Alunos      @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade, map: "fk_presencas_aluno")
  aula          Aula        @relation(fields: [idAula], references: [idAula], onDelete: Cascade, map: "fk_presencas_aula")
  professor     Professores @relation(fields: [idProfessor], references: [idProfessor], map: "fk_presencas_professor")

  @@index([idAluno], map: "fk_presencas_aluno")
  @@index([idAula], map: "fk_presencas_aula")
  @@index([idProfessor], map: "fk_presencas_professor")
}

model HistoricoEscolar {
  idHistorico Int      @id @default(autoincrement())
  idAluno     Int
  idCurso     Int
  idMateria   Int
  nota        Decimal  @default(0.00) @db.Decimal(5, 2)
  frequencia  Decimal  @default(0.00) @db.Decimal(5, 2)
  created_at  DateTime @default(now()) @db.DateTime(0)
  aluno       Alunos   @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade, map: "fk_historico_aluno")
  curso       Curso    @relation(fields: [idCurso], references: [idCurso], onDelete: Cascade, map: "fk_historico_curso")
  materia     Materias @relation(fields: [idMateria], references: [idMateria], onDelete: Cascade, map: "fk_historico_materia")

  @@index([idAluno], map: "fk_historico_aluno")
  @@index([idCurso], map: "fk_historico_curso")
  @@index([idMateria], map: "fk_historico_materia")
}

model Usuarios {
  cpf        String      @id @db.VarChar(14)
  senhaHash  String      @db.VarChar(255)
  tipo       TipoUsuario
  created_at DateTime    @default(now()) @db.DateTime(0)
}

model Log {
  idLog    Int      @id @default(autoincrement())
  action   String   @db.Text
  dateTime DateTime @default(now()) @db.DateTime(0)
}

model DiasNaoLetivos {
  id        Int      @id @default(autoincrement())
  data      DateTime @db.Date
  descricao String?  @db.VarChar(255)
}

enum StatusMatricula {
  Ativa
  Trancada
  Cancelada
}

enum TipoUsuario {
  Admin
  Coordenador
  Professor
  Aluno
}

model Notas {
  idNota         Int      @id @default(autoincrement())
  nome           String   @db.VarChar(100)
  idAluno        Int
  idMateria      Int
  idTurma        Int
  idProfessor    String   @db.VarChar(14)
  valorNota      Decimal  @db.Decimal(5,2)
  dataLancamento DateTime @default(now()) @db.DateTime(0)
  tipoAvaliacao  String   @db.VarChar(50)
  observacoes    String?  @db.Text
  
  aluno      Alunos      @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade)
  materia    Materias    @relation(fields: [idMateria], references: [idMateria], onDelete: Cascade)
  turma      Turmas      @relation(fields: [idTurma], references: [idTurma], onDelete: Cascade)
  professor  Professores @relation(fields: [idProfessor], references: [idProfessor], onDelete: Cascade)

  @@unique([idAluno, idMateria, idTurma, tipoAvaliacao], name: "uc_aluno_materia_turma_tipo")
  @@index([idProfessor], map: "fk_notas_professor")
}

model AtestadosMedicos {
  idAtestado     Int      @id @default(autoincrement())
  idAluno        Int
  dataInicio     DateTime @db.Date
  dataFim        DateTime @db.Date
  motivo         String   @db.VarChar(255)
  arquivoPath    String   @db.VarChar(500)
  dataEnvio      DateTime @default(now()) @db.DateTime(0)
  status         StatusAtestado @default(Pendente)
  observacoes    String?  @db.Text
  avaliadoPor    String?  @db.VarChar(14)
  dataAvaliacao  DateTime? @db.DateTime(0)
  justificativaRejeicao String? @db.Text
  
  aluno          Alunos   @relation(fields: [idAluno], references: [idAluno], onDelete: Cascade)
  avaliador      Professores? @relation(fields: [avaliadoPor], references: [idProfessor])
  aulasJustificadas AtestadoAulas[]

  @@index([idAluno], map: "fk_atestados_aluno")
  @@index([avaliadoPor], map: "fk_atestados_avaliador")
}

model AtestadoAulas {
  idAtestado     Int
  idAula         Int
  aplicado       Boolean  @default(false)
  dataAplicacao  DateTime? @db.DateTime(0)
  
  atestado       AtestadosMedicos @relation(fields: [idAtestado], references: [idAtestado], onDelete: Cascade)
  aula           Aula @relation(fields: [idAula], references: [idAula], onDelete: Cascade)

  @@id([idAtestado, idAula])
  @@index([idAula], map: "fk_atestado_aulas_aula")
}

enum StatusAtestado {
  Pendente
  Aprovado
  Rejeitado
  Analisando
}

model PreCadastro {
  idPreCadastro       Int      @id @default(autoincrement())
  nome                String   @db.VarChar(100)
  sobrenome           String   @db.VarChar(150)
  cpf                 String   @unique @db.VarChar(14)
  rg                  String   @db.VarChar(12)
  nomeMae             String   @db.VarChar(160)
  nomePai             String?  @db.VarChar(160)
  dataNasc            DateTime @db.Date
  email               String   @db.VarChar(255)
  telefone            String   @db.VarChar(20)
  telefoneResponsavel String?  @db.VarChar(20)
  nomeResponsavel     String?  @db.VarChar(100)
  // Endereço
  cep                 String   @db.VarChar(9)
  rua                 String   @db.VarChar(255)
  cidade              String   @db.VarChar(100)
  uf                  String   @db.Char(2)
  numero              String   @db.VarChar(10)
  complemento         String?  @db.VarChar(100)
  // Curso pretendido
  idCursoDesejado     Int
  // Status do pré-cadastro
  status              StatusPreCadastro @default(Pendente)
  dataEnvio           DateTime @default(now()) @db.DateTime(0)
  dataAvaliacao       DateTime? @db.DateTime(0)
  avaliadoPor         String?  @db.VarChar(14)
  observacoes         String?  @db.Text
  motivoRejeicao      String?  @db.Text
  // Relações
  curso               Curso    @relation(fields: [idCursoDesejado], references: [idCurso])
  avaliador           Professores? @relation(fields: [avaliadoPor], references: [idProfessor])
  documentos          DocumentosPreCadastro[]
  @@index([idCursoDesejado], map: "fk_precadastro_curso")
  @@index([avaliadoPor], map: "fk_precadastro_avaliador")
}

model DocumentosPreCadastro {
  idDocumento       Int      @id @default(autoincrement())
  idPreCadastro     Int
  tipoDocumento     TipoDocumento
  nomeArquivo       String   @db.VarChar(255)
  caminhoArquivo    String   @db.VarChar(500)
  tamanhoArquivo    Int      // em bytes
  dataUpload        DateTime @default(now()) @db.DateTime(0)
  
  preCadastro       PreCadastro @relation(fields: [idPreCadastro], references: [idPreCadastro], onDelete: Cascade)
  
  @@index([idPreCadastro], map: "fk_docs_precadastro")
}

enum StatusPreCadastro {
  Pendente
  EmAnalise
  Aprovado
  Rejeitado
  DocumentacaoIncompleta
}

enum TipoDocumento {
  Foto3x4
  RG
  CPF
  ComprovanteResidencia
  HistoricoEscolar
  CertidaoNascimento
  CertidaoCasamento
  ComprovanteRenda
  Outros
}